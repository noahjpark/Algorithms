/* Noah Park

You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.

A string is called palindrome if is one that reads the same backward as well as forward.

*/

class Solution {
    
    // Intuition: We can remove any set of characters that makes a palindrome. Given that all letters are either 'a' or 'b', either the string is initially a palindrome (ex. 'aabbaa') or not (ex. 'aabb'). If it is we caan simply return 1 (remove the whole string). Otherwise, we simplify the string by removing all of a given character (notice that any repeating sequence is a palindrome of the same character). Since we only contain two types of characters, we will result in all of the same character again which we can then remove to nothing. In this problem, we will only ever return 1 or 2 given a valid string to begin with.
    // Time: O(n) to check if s is a palindrome.
    // Space: O(1) constant.
    public int removePalindromeSub(String s) {
        if (s == null || s.length() == 0) return 0;
        return isPal(s) ? 1 : 2;
    }
    
    public boolean isPal(String s) {
        int i = 0, j = s.length() - 1;
        
        while (i < j)
            if (s.charAt(i++) != s.charAt(j--)) return false;
        
        return true;
    } 
}
